// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  phone         String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  cart      CartItem[]
  wishlist  WishlistItem[]
  addresses Address[]
  reviews   Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  images      String[]
  sku         String?  @unique
  barcode     String?
  inventory   Int      @default(0)
  weight      Decimal? @db.Decimal(8, 2)
  dimensions  String?
  material    String?
  care        String?
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants    ProductVariant[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]
  reviews     Review[]
  tags        ProductTag[]

  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String  // e.g., "Size", "Color"
  value     String  // e.g., "Large", "Red"
  price     Decimal? @db.Decimal(10, 2)
  inventory Int     @default(0)
  sku       String? @unique
  image     String?
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@unique([productId, name, value])
  @@index([productId])
}

model Tag {
  id       String @id @default(cuid())
  name     String @unique
  slug     String @unique
  products ProductTag[]
}

model ProductTag {
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
}

model CartItem {
  id                String          @id @default(cuid())
  userId            String
  productId         String
  productVariantId  String?
  quantity          Int             @default(1)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant    ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, productId, productVariantId])
  @@index([userId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  firstName    String
  lastName     String
  company      String?
  address1     String
  address2     String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders Order[]

  @@index([userId])
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique @default(cuid())
  userId            String?
  email             String
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  subtotal          Decimal     @db.Decimal(10, 2)
  taxAmount         Decimal     @db.Decimal(10, 2) @default(0)
  shippingAmount    Decimal     @db.Decimal(10, 2) @default(0)
  discountAmount    Decimal     @db.Decimal(10, 2) @default(0)
  total             Decimal     @db.Decimal(10, 2)
  currency          String      @default("USD")
  
  // Shipping Address
  shippingAddressId String?
  shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id])
  
  // Billing Address (stored as JSON for flexibility)
  billingAddress    Json?
  
  // Payment Information
  paymentIntentId   String?
  paymentMethodId   String?
  
  // Shipping Information
  trackingNumber    String?
  shippingCarrier   String?
  
  // Timestamps
  paidAt            DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user      User?       @relation(fields: [userId], references: [id])
  items     OrderItem[]
  
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id               String          @id @default(cuid())
  orderId          String
  productId        String
  productVariantId String?
  quantity         Int
  price            Decimal         @db.Decimal(10, 2)
  total            Decimal         @db.Decimal(10, 2)
  
  order            Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product          Product         @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@index([orderId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  isPublished Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  RETURNED
  PARTIALLY_RETURNED
} 